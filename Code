
// Step 1. Includes of the Sensor Board and Communications modules used

#include <WaspSensorAgr_v20.h>



// Step 2. Variables declaration

char  CONNECTOR_A[3] = "CA";                   
char  CONNECTOR_B[3] = "CB";                  
char  CONNECTOR_C[3] = "CC";
char  CONNECTOR_D[3] = "CD";
char  CONNECTOR_E[3] = "CE";
char  CONNECTOR_F[3] = "CF";

long  sequenceNumber = 0;                     
                                               
char  nodeID[10] = "MY_MOTE";              

char* sleepTime = "00:00:00:01";             

char data[100];                       

float connectorAFloatValue;                  
float connectorBFloatValue;              
float connectorCFloatValue;            
float connectorDFloatValue;     
float connectorEFloatValue;
float connectorFFloatValue;

int connectorAIntValue;
int connectorBIntValue;
int connectorCIntValue;
int connectorDIntValue;
int connectorEIntValue;
int connectorFIntValue;

char  connectorAString[10];          
char  connectorBString[10];          
char  connectorCString[10];
char  connectorDString[10];
char  connectorEString[10];
char  connectorFString[10];

int   batteryLevel;
char  batteryLevelString[10];
char  BATTERY[4] = "BAT";

char  TIME_STAMP[3] = "TS";

float digitalTemperature;    
float digitalHumidity;         
char  digitalTemperatureString[10];
char  digitalHumidityString[10];
char  SENSIRION_T[3] = "ST";         
char  SENSIRION_H[3] = "SH";


void setup() 
{

// Step 3. Communication module initialization

// Step 4. Communication module to ON

    USB.ON();

// Step 5. Initial message composition

    sprintf(data,"Hello, this is Waspmote Plug & Sense!\r\n");

// Step 6. Initial message transmission

    USB.println(data);

// Step 7. Communication module to OFF

    USB.OFF();


}

void loop()
{
// Step 8. Turn on the Sensor Board

    //Turn on the sensor board
    SensorAgrv20.ON();
    //Turn on the RTC
    RTC.ON();
    //supply stabilization delay
    delay(100);

// Step 9. Turn on the sensors

    SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_SENSIRION);
    delay(10000);

    SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_TEMP_DS18B20);
    delay(1000);

    SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_WATERMARK_2);
    delay(100);

// Step 10. Read the sensors

    

    // First dummy reading for analog-to-digital converter channel selection
    PWR.getBatteryLevel();
    // Getting Battery Level
    batteryLevel = PWR.getBatteryLevel();
    // Conversion into a string
    itoa(batteryLevel, batteryLevelString, 10);

    //Sensor temperature reading
    digitalTemperature = SensorAgrv20.readValue(SENS_AGR_SENSIRION, SENSIRION_TEMP);
    //Conversion into a string
    Utils.float2String(digitalTemperature, digitalTemperatureString, 2);
  
    //Sensor humidty reading
    digitalHumidity = SensorAgrv20.readValue(SENS_AGR_SENSIRION, SENSIRION_HUM);
    //Conversion into a string
    Utils.float2String(digitalHumidity, digitalHumidityString, 2);

    //Sensor temperature reading
    connectorCFloatValue = SensorAgrv20.readValue(SENS_AGR_TEMP_DS18B20);
    //Conversion into a string
    Utils.float2String(connectorCFloatValue, connectorCString, 2);

    //Sensor temperature reading
    connectorEFloatValue = SensorAgrv20.readValue(SENS_AGR_WATERMARK_2);
    //Conversion into a string
    Utils.float2String(connectorEFloatValue, connectorEString, 2);

// Step 11. Turn off the sensors

    SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_SENSIRION);

    SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_TEMP_DS18B20);

    SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_WATERMARK_2);

// Step 12. Message composition

    //Data payload composition
    sprintf(data,"I:%s#N:%li#%s:%s#%s:%s#%s:%s#%s:%s#%s:%s#%s:%s\r\n",
	nodeID ,
	sequenceNumber,
	BATTERY, batteryLevelString,
	TIME_STAMP, RTC.getTimestamp(),
	SENSIRION_T, digitalTemperatureString,
	SENSIRION_H, digitalHumidityString,
	CONNECTOR_C , connectorCString,
	CONNECTOR_E , connectorEString);

// Step 13. Communication module to ON

    USB.ON();

// Step 14. Message transmission

    USB.println(data);

// Step 15. Communication module to OFF

    USB.OFF();

// Step 16. Entering Sleep Mode

    PWR.deepSleep(sleepTime,RTC_OFFSET,RTC_ALM1_MODE1,ALL_OFF);
    //Increase the sequence number after wake up
    sequenceNumber++;


}




